kind: Service
apiVersion: v1
metadata:
  name: drone-sim-cluster-bootstrap
  labels:
    app: drone-sim
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: drone-sim
  ports:
  - name: management
    port: 8558
    targetPort: 8558
    protocol: TCP
  - name: remoting
    port: 2552
    targetPort: 2552
    protocol: TCP
---
kind: Service
apiVersion: v1
metadata:
  name: drone-sim
  namespace: lightbend
  labels:
      app: drone-sim
spec:
  type: ClusterIP
  ports:
  - name: app
    port: 9000
    targetPort: 9000
    protocol: TCP
  selector:
    app: drone-sim
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: drone-sim
  namespace: lightbend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: drone-sim
  template:
    metadata:
      name: drone-sim
      labels:
        app: drone-sim
      annotations:
        "prometheus.io/scrape": "true"
        "prometheus.io/scheme": http
        "prometheus.io/path": "/metrics"
        "prometheus.io/port": "9001"
    spec:
      containers:
      - name: drone-sim
        image: lightbend/drone-tracker:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: CONFIG_RESOURCE
          value: "application-dronesim-k8s.conf"
        livenessProbe:
          httpGet:
            path: /alive
            port: 9000
          initialDelaySeconds: 30
          periodSeconds: 15
        readinessProbe:
          httpGet:
            path: /ready
            port: 9000
        ports:
        - name: app
          containerPort: 9000
          protocol: TCP
        - name: prometheus
          containerPort: 9001
          protocol: TCP
        - name: remoting
          containerPort: 2552
          protocol: TCP
        - name: management
          containerPort: 8558
          protocol: TCP
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: pod-reader
  namespace: lightbend
rules:
- apiGroups: [""] # "" indicates the core API group
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: read-pods
  namespace: lightbend
subjects:
# Note the `name` line below. The first default refers to the namespace. The second refers to the service account name.
# For instance, `name: system:serviceaccount:myns:default` would refer to the default service account in namespace `myns`
- kind: User
  name: system:serviceaccount:lightbend:default
roleRef:
  kind: Role
  name: pod-reader
  apiGroup: rbac.authorization.k8s.io